package chapter12.code.listing.base;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Properties;

import javax.activation.MimetypesFileTypeMap;
import javax.portlet.GenericPortlet;
import javax.portlet.MimeResponse;
import javax.portlet.PortalContext;
import javax.portlet.PortletException;
import javax.portlet.RenderMode;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;

import org.apache.log4j.Logger;
import org.w3c.dom.Element;

import chapter12.code.listing.domain.Book;
import chapter12.code.listing.service.BookService;
import chapter12.code.listing.service.BookServiceImpl;
import chapter12.code.listing.utils.Constants;

/**
 * BookCatalogPortlet class represents the portlet class responsible for
 * handling portlet requests.
 * 
 * @author asarin
 */
public class BookCatalogPortlet extends GenericPortlet {

	private Logger logger = Logger.getLogger(BookCatalogPortlet.class);
	private static BookService bookService;
	private Properties props = new Properties();
	private MimetypesFileTypeMap mimeFileMap = new MimetypesFileTypeMap();
	
	/*
	 * Overrides the init method of the GenericPortlet class to set the
	 * BookService. BookService is simply a service which retrieves data from
	 * the PortletContext. The data was put into the PortletContext by
	 * BookCatalogContextListener, configured in web.xml file.
	 * 
	 * @see javax.portlet.GenericPortlet#init()
	 */
	public void init() {
		bookService = new BookServiceImpl(this.getPortletContext());
		InputStream inStream = this.getClass().getClassLoader()
				.getResourceAsStream("dwr.properties");
		try {
			props.load(inStream);
		} catch (IOException e) {
			e.printStackTrace();
		}
		InputStream mimePropertiesStream = this.getClass().getClassLoader().getResourceAsStream("mimetypes.properties");
		Properties props = new Properties();
		try {
			props.load(mimePropertiesStream);
		} catch(Exception e) {
			e.printStackTrace();
		}
		String mimeTypesString = props.getProperty("mime.types");
		String[] mimeTypes = mimeTypesString.split(",");
		for(int i = 0; i < mimeTypes.length; i++) {
			mimeFileMap.addMimeTypes(mimeTypes[i]);
		}
	}

	public static BookService getBookService() {
		return bookService;
	}

	/*
	 * doHeaders method is responsible for adding bookCatalog.css (CSS file) and
	 * bookCatalog.js (JavaScript file) to the <head> section of the HTML markup
	 * generated by the portal page. This is an optional feature and may not be
	 * available in all portal servers. For example, JetSpeed allows you to add
	 * elements, and also Liferay with OpenPortal Portlet Container. Glassfish
	 * v2.1 ignores the MARKUP_HEAD_ELEMENT header.
	 * 
	 * @see javax.portlet.GenericPortlet#doHeaders(javax.portlet.RenderRequest,
	 * javax.portlet.RenderResponse)
	 */
	protected void doHeaders(RenderRequest request, RenderResponse response) {
		super.doHeaders(request, response);
		PortalContext portalContext = request.getPortalContext();
		String portalInfo = portalContext.getPortalInfo();
		getPortletContext().setAttribute("bookCatalogPortletNamespace", response.getNamespace());
		// -- adding DOM element to head is supported by JetSpeed 2.2
		if (portalInfo.contains(Constants.JETSPEED)) {
			// -- add CSS
			Element cssElement = response.createElement("link");
			// --encoding URLs is important
			cssElement.setAttribute("href", response.encodeURL((request
					.getContextPath() + "/css/bookCatalog.css")));
			cssElement.setAttribute("rel", "stylesheet");
			cssElement.setAttribute("type", "text/css");
			response.addProperty(MimeResponse.MARKUP_HEAD_ELEMENT, cssElement);

			// -- add JavaScript
			Element jsElement = response.createElement("script");

			// --encoding URLs to resources is important
			jsElement.setAttribute("src", response.encodeURL((request
					.getContextPath() + "/js/bookCatalog.js")));
			jsElement.setAttribute("type", "text/javascript");
			response.addProperty(MimeResponse.MARKUP_HEAD_ELEMENT, jsElement);
		}
	}

	/**
	 * Render method for HELP portlet mode. In this mode portlet shows help
	 * information to the user.
	 * 
	 * @param request
	 * @param response
	 * @throws IOException
	 * @throws PortletException
	 */
	@RenderMode(name = "help")
	public void showHelp(RenderRequest request, RenderResponse response)
			throws IOException, PortletException {
		logger.info("Generating Help information for the portlet");
		String titleKey = "portlet.title.help";
		response.setTitle(getResourceBundle(request.getLocale()).getString(
				titleKey));
		getPortletContext().getRequestDispatcher(
				response.encodeURL(Constants.PATH_TO_JSP_PAGE + "help.jsp"))
				.include(request, response);
	}

	/**
	 * Render method for the EDIT portlet mode. In this mode the portlet allows
	 * users to view and specify their preferences. The Book catalog portlet
	 * in-turn personalizes portlet content / behavior based on the preferences
	 * selected/entered by the user.
	 * 
	 * @param request
	 * @param response
	 * @throws IOException
	 * @throws PortletException
	 */
	@RenderMode(name = "edit")
	public void showPrefs(RenderRequest request, RenderResponse response)
			throws IOException, PortletException {
		logger.info("Generating Preferences details for the portlet");
		String titleKey = "portlet.title.preferences";
		response.setTitle(getResourceBundle(request.getLocale()).getString(
				titleKey));
		getPortletContext().getRequestDispatcher(
				response.encodeURL(Constants.PATH_TO_JSP_PAGE
						+ "preferences.jsp")).include(request, response);
	}

	/**
	 * Render method for the VIEW portlet mode. This is where all the main
	 * business functionality of the portlet lies.
	 * 
	 * @param request
	 * @param response
	 * @throws IOException
	 * @throws PortletException
	 */
	@RenderMode(name = "VIEW")
	public void showPortlet(RenderRequest request, RenderResponse response)
			throws IOException, PortletException {
		logger.info("Inside showBooks method");
		getPortletContext().getRequestDispatcher(
				response.encodeURL(Constants.PATH_TO_JSP_PAGE + "home.jsp"))
				.include(request, response);
	}

	public void serveResource(ResourceRequest request, ResourceResponse response)
			throws PortletException, java.io.IOException {
		String resourceID = request.getResourceID();
		logger.info("Resource id in incoming request: " + resourceID);
		if ("books".equalsIgnoreCase(resourceID)) {
			List<Book> books = bookService.getBooks();
			request.setAttribute("books", books);

			getPortletContext().getRequestDispatcher(
					response.encodeURL(Constants.PATH_TO_JSP_PAGE
							+ "bookList.jsp")).include(request, response);
		}
		if ("showAddBookForm".equalsIgnoreCase(resourceID)) {
			logger.info("Inside showAddBookForm");
			getPortletContext().getRequestDispatcher(
					response.encodeURL(Constants.PATH_TO_JSP_PAGE
							+ "addBookForm.jsp")).include(request, response);
		}
		if ("downloadToC".equalsIgnoreCase(resourceID)) {
			File file = new File(props.getProperty("uploadFolder") + File.separator
					+ request.getParameter("fileName"));
			OutputStream outStream = response.getPortletOutputStream();
			if (!file.exists() || !file.canRead()) {
				outStream.write("<i>Unable to find the specified file</i>"
						.getBytes());
			} else {
				FileInputStream inStream = new FileInputStream(file);
				response.setContentType(mimeFileMap.getContentType(request.getParameter("fileName")));
				response.setProperty("Content-disposition",
						"attachment; filename=\"" + request.getResourceID()
								+ "\"");
				byte[] buffer = new byte[1024];
				while (true) {
					int bytes = inStream.read(buffer);
					if (bytes <= 0) {
						break;
					}
					outStream.write(buffer, 0, bytes);
				}
			}
			outStream.flush();
			outStream.close();
		}
		if ("uploadTocForm".equalsIgnoreCase(resourceID)) {
			request.setAttribute("isbnNumber", request
					.getParameter("isbnNumber"));
			getPortletContext().getRequestDispatcher(
					response.encodeURL(Constants.PATH_TO_JSP_PAGE
							+ "uploadForm.jsp")).include(request, response);
		}
		if ("removeBook".equalsIgnoreCase(resourceID)) {
			BookService bookService = BookCatalogPortlet.getBookService();
			bookService.removeBook(Long.valueOf(request.getParameter("isbnNumber")));
			List<Book> books = bookService.getBooks();
			request.setAttribute("books", books);

			getPortletContext().getRequestDispatcher(
					response.encodeURL(Constants.PATH_TO_JSP_PAGE
							+ "bookList.jsp")).include(request, response);
		}
	}
}
